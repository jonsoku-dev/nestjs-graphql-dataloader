# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Board {
  category: BoardCategory!
  comments: [BoardComment!]!
  createdAt: DateTime!
  description: String!
  id: ID!
  imageUrl: String
  likes: [BoardLike!]!
  title: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

enum BoardCategory {
  ALL
  FQ
  FREE
  JOB
  TRADE
}

type BoardComment {
  board: Board!
  boardId: String!
  body: String!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type BoardEdge {
  cursor: String!
  node: Board!
}

type BoardLike {
  board: Board!
  boardId: String!
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type BoardPageInfo {
  endCursor: String
  hasNextPage: Boolean
  startCursor: String
}

input CreateBoardCommentInput {
  boardId: String!
  body: String!
}

input CreateBoardInput {
  category: BoardCategory!
  description: String!
  title: String!
}

input CreateDetailInput {
  company: String!
  introduce: String!
  status: Boolean = false
}

input CreateNoticeInput {
  description: String!
  imageUrl: String
  title: String!
}

input CreateSnsInput {
  facebook: String
  instagram: String
  kakaotalk: String
  line: String
  twitter: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Detail {
  company: String!
  id: ID!
  introduce: String!
  status: Boolean!
  user: User!
  userId: String!
}

input ForgotEmailInput {
  username: String!
}

input ForgotPasswordInput {
  email: String!
  password: String!
}

type GetBoardListOutput {
  edges: [BoardEdge!]
  pageInfo: BoardPageInfo
}

type GetNoticeListOutput {
  edges: [NoticeEdge!]
  pageInfo: NoticePageInfo
}

input GoogleLoginInput {
  tokenId: String!
}

input GoogleRegisterInput {
  tokenId: String!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginOutput {
  token: String!
}

type Mutation {
  createBoard(input: CreateBoardInput!): Board!
  createBoardComment(input: CreateBoardCommentInput!): BoardComment!
  createDetail(input: CreateDetailInput!): String!
  createNotice(input: CreateNoticeInput!): Notice!
  createSns(input: CreateSnsInput!): String!
  deleteBoard(boardId: String!): String!
  deleteNotice(noticeId: String!): Notice!
  forgotEmail(input: ForgotEmailInput!): User!
  forgotPassword(input: ForgotPasswordInput!): String!
  googleLogin(input: GoogleLoginInput!): LoginOutput!
  googleRegister(input: GoogleRegisterInput!): User!
  like(boardId: String!): String!
  localLogin(input: LoginInput!): User!
  login(input: LoginInput!): LoginOutput!
  register(input: RegisterInput!): User!
  resetPassword(input: ResetPasswordInput!): User!
  subscribe(targetUserId: String!): UserSubscription!
  unlike(boardId: String!): String!
  unsubscribe(targetUserId: String!): String!
  updateBoard(input: UpdateBoardInput!): Board!
  updateBoardComment(input: UpdateBoardCommentInput!): BoardComment!
  updateDetail(input: UpdateDetailInput!): String!
  updateNotice(input: UpdateNoticeInput!): Notice!
  updateSns(input: UpdateSnsInput!): String!
  uploadBoardImage(boardId: String!, file: Upload!): String!
  uploadNoticeImage(file: Upload!, noticeId: String!): String!
}

type Notice {
  createdAt: DateTime!
  description: String!
  id: String!
  imageUrl: String
  title: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type NoticeEdge {
  cursor: String!
  node: Notice!
}

type NoticePageInfo {
  endCursor: String
  hasNextPage: Boolean
  startCursor: String
}

type Query {
  findUser(userId: String!): User!
  getBoard(boardId: String!): Board!
  getBoardList(after: String, category: BoardCategory, first: String, keyword: String): GetBoardListOutput!
  getNotice(noticeId: String!): Notice!
  getNoticeList(after: String, first: String, keyword: String): GetNoticeListOutput!
  me: User!
  test: Boolean!
}

input RegisterInput {
  email: String!
  password: String!
  role: UserRole = Client
  username: String!
}

input ResetPasswordInput {
  confirmCode: Float
  password: String!
}

type Sns {
  facebook: String
  id: ID!
  instagram: String
  kakaotalk: String
  line: String
  twitter: String
  user: User!
  userId: String!
}

input UpdateBoardCommentInput {
  boardId: String
  body: String
  commentId: String!
}

input UpdateBoardInput {
  boardId: String!
  category: BoardCategory
  description: String
  title: String
}

input UpdateDetailInput {
  company: String
  introduce: String
  status: Boolean = false
}

input UpdateNoticeInput {
  description: String
  imageUrl: String
  noticeId: String!
  title: String
}

input UpdateSnsInput {
  facebook: String
  instagram: String
  kakaotalk: String
  line: String
  twitter: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  confirmCode: Float
  createdAt: DateTime!
  detail: Detail
  email: String!
  id: String!
  role: UserRole!
  sns: Sns
  subscribers: [UserSubscription!]
  subscriptions: [UserSubscription!]
  updatedAt: DateTime!
  username: String!
}

enum UserRole {
  Admin
  Client
}

type UserSubscription {
  createdAt: DateTime!
  id: ID!
  subscribedTo: User!
  subscribedToId: String!
  subscriber: User!
  subscriberId: String!
  updatedAt: DateTime!
}
