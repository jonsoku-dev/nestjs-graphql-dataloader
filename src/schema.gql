# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Board {
  category: BoardCategory!
  comments: [BoardComment!]!
  createdAt: DateTime!
  description: String!
  id: ID!
  likes: [BoardLike!]!
  title: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

enum BoardCategory {
  FQ
  FREE
  JOB
  TRADE
}

type BoardComment {
  board: Board!
  boardId: String!
  body: String!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type BoardEdge {
  cursor: String!
  node: Board!
}

type BoardLike {
  board: Board!
  boardId: String!
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type BoardPageInfo {
  endCursor: String
  hasNextPage: Boolean
  startCursor: String
}

input CreateBoardCommentInput {
  boardId: String!
  body: String!
}

input CreateBoardInput {
  category: BoardCategory!
  description: String!
  title: String!
}

input CreateNoticeInput {
  description: String!
  imageUrl: String
  title: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input ForgotEmailInput {
  username: String!
}

input ForgotPasswordInput {
  email: String!
  password: String!
}

input GetBoardListFilter {
  after: String
  category: BoardCategory
  first: String
  keyword: String
}

type GetBoardListOutput {
  edges: [BoardEdge!]
  pageInfo: BoardPageInfo
}

input GetNoticeListFilter {
  after: String
  first: String
  keyword: String
}

type GetNoticeListOutput {
  edges: [NoticeEdge!]
  pageInfo: NoticePageInfo
}

input LoginInput {
  email: String!
  password: String!
}

type LoginOutput {
  token: String!
}

type Mutation {
  createBoard(input: CreateBoardInput!): Board!
  createBoardComment(input: CreateBoardCommentInput!): BoardComment!
  createNotice(input: CreateNoticeInput!): Notice!
  deleteBoard(boardId: String!): String!
  deleteNotice(noticeId: String!): Notice!
  forgotEmail(input: ForgotEmailInput!): User!
  forgotPassword(input: ForgotPasswordInput!): String!
  like(boardId: String!): String!
  login(input: LoginInput!): LoginOutput!
  register(input: RegisterInput!): User!
  resetPassword(input: ResetPasswordInput!): User!
  unlike(boardId: String!): String!
  updateBoard(input: UpdateBoardInput!): Board!
  updateBoardComment(input: UpdateBoardCommentInput!): BoardComment!
  updateNotice(input: UpdateNoticeInput!): Notice!
}

type Notice {
  createdAt: DateTime!
  description: String!
  id: String!
  imageUrl: String
  title: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type NoticeEdge {
  cursor: String!
  node: Notice!
}

type NoticePageInfo {
  endCursor: String
  hasNextPage: Boolean
  startCursor: String
}

type Query {
  findUser(userId: String!): User!
  getBoard(boardId: String!): Board!
  getBoardList(filter: GetBoardListFilter): GetBoardListOutput!
  getNotice(noticeId: String!): Notice!
  getNoticeList(filter: GetNoticeListFilter): GetNoticeListOutput!
  me: User!
  test: Boolean!
}

input RegisterInput {
  email: String!
  password: String!
  role: UserRole = Client
  username: String!
}

input ResetPasswordInput {
  confirmCode: Float
  password: String!
}

type Sns {
  facebook: String!
  id: ID!
  instagram: String!
  kakaotalk: String!
  line: String!
  twitter: String!
  user: User!
  userId: String!
}

input UpdateBoardCommentInput {
  boardId: String
  body: String
  commentId: String!
}

input UpdateBoardInput {
  boardId: String!
  category: BoardCategory
  description: String
  title: String
}

input UpdateNoticeInput {
  description: String
  imageUrl: String
  noticeId: String!
  title: String
}

type User {
  confirmCode: Float
  createdAt: DateTime!
  email: String!
  id: String!
  role: UserRole!
  sns: Sns
  updatedAt: DateTime!
  username: String!
}

enum UserRole {
  Admin
  Client
}
