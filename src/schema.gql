# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Board {
  category: BoardCategory!
  comments: [Comment!]!
  createdAt: DateTime!
  description: String!
  id: ID!
  likes: [Like!]!
  title: String!
  updatedAt: DateTime!
  user: User!
  userId: Float!
}

enum BoardCategory {
  FQ
  FREE
  JOB
  TRADE
}

type BoardEdge {
  cursor: String!
  node: Board!
}

type BoardPageInfo {
  endCursor: String
  hasNextPage: Boolean
  startCursor: String
}

type Comment {
  body: String!
  createdAt: DateTime!
  id: Float!
  updatedAt: DateTime!
  user: User!
}

input CreateBoardCommentInput {
  boardId: Int!
  body: String!
}

input CreateBoardInput {
  category: BoardCategory!
  description: String!
  title: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input ForgotEmailInput {
  username: String!
}

input ForgotPasswordInput {
  email: String!
  password: String!
}

input GetBoardListFilter {
  after: Int
  category: BoardCategory
  first: Int
  keyword: String
}

type GetBoardListOutput {
  edges: [BoardEdge!]
  pageInfo: BoardPageInfo
}

type Like {
  board: Board!
  boardId: Float!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  user: User!
  userId: Float!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginOutput {
  token: String!
}

type Mutation {
  createBoard(input: CreateBoardInput!): Board!
  createBoardComment(input: CreateBoardCommentInput!): Comment!
  deleteBoard(boardId: Float!): String!
  forgotEmail(input: ForgotEmailInput!): User!
  forgotPassword(input: ForgotPasswordInput!): String!
  like(boardId: Int!): String!
  login(input: LoginInput!): LoginOutput!
  register(input: RegisterInput!): User!
  resetPassword(input: ResetPasswordInput!): User!
  unlike(boardId: Int!): String!
  updateBoard(input: UpdateBoardInput!): Board!
  updateBoardComment(input: UpdateBoardCommentInput!): Comment!
}

type Query {
  getBoard(boardId: Float!): Board!
  getBoardList(filter: GetBoardListFilter): GetBoardListOutput!
  me: User!
  test: Boolean!
}

input RegisterInput {
  email: String!
  password: String!
  role: UserRole = Client
  username: String!
}

input ResetPasswordInput {
  confirmCode: Float
  password: String!
}

input UpdateBoardCommentInput {
  boardId: Int
  body: String
  commentId: Int!
}

input UpdateBoardInput {
  boardId: Float!
  category: BoardCategory
  description: String
  title: String
}

type User {
  confirmCode: Float
  createdAt: DateTime!
  email: String!
  id: Float!
  role: UserRole!
  updatedAt: DateTime!
  username: String!
}

enum UserRole {
  Admin
  Client
}
