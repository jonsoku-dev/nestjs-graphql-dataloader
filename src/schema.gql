# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Board {
  createdAt: DateTime!
  description: String!
  id: ID!
  title: String!
  updatedAt: DateTime!
}

type BoardEdge {
  cursor: String!
  node: Board!
}

type BoardError {
  message: String
  status: Float
}

type BoardOutput {
  data: Board
  error: BoardError
  ok: Boolean!
}

type BoardPageInfo {
  endCursor: String
  hasNextPage: Boolean
  startCursor: String
}

input CreateBoardInput {
  description: String!
  title: String!
}

type CursorPaginatedBoardList {
  edges: [BoardEdge!]
  pageInfo: BoardPageInfo
}

type CursorPaginatedBoardListError {
  message: String
  status: Float
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input GenerateCodeAndSendMailInput {
  email: String!
}

input GetBoardListFilter {
  after: Float!
  first: Float!
}

type GetBoardListOutput {
  data: CursorPaginatedBoardList
  error: CursorPaginatedBoardListError
  ok: Boolean!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginOutput {
  data: Token
  error: TokenError
  ok: Boolean!
}

type Mutation {
  confirmCode(email: String!, passwordSecretCode: Float!): String!
  createBoard(input: CreateBoardInput!): BoardOutput!
  generateCodeAndSendMail(input: GenerateCodeAndSendMailInput!): String!
  login(input: LoginInput!): LoginOutput!
  register(input: RegisterInput!): UserOutput!
  resetPassword(input: ResetPasswordInput!): UserOutput!
}

type Query {
  getBoard(boardId: Float!): BoardOutput!
  getBoardList(filter: GetBoardListFilter): GetBoardListOutput!
  me: UserOutput!
  test: Boolean!
}

input RegisterInput {
  email: String!
  password: String!
  role: UserRole = Client
  username: String!
}

input ResetPasswordInput {
  email: String!
  password: String!
}

type Token {
  token: String!
}

type TokenError {
  message: String
  status: Float
}

type User {
  createdAt: DateTime!
  email: String!
  id: Float!
  password: String!
  passwordConfirmSecretCode: Boolean
  passwordSecretCode: Float
  role: UserRole!
  updatedAt: DateTime!
  username: String!
}

type UserError {
  message: String
  status: Float
}

type UserOutput {
  data: User
  error: UserError
  ok: Boolean!
}

enum UserRole {
  Admin
  Client
}
